
TASK 18/06/2024
NAME-SAPTAK SINGHA
22BCE0985


1.question-Find all products that have "white" as a color and a CPU speed greater than the average CPU speed of all products.
answer-const avgCpuSpeed = db.products1.aggregate([
    { $group: { _id: null, avgCpu: { $avg: "$spec.cpu" } } },
    { $project: { _id: 0, avgCpu: 1 } }
]).toArray()[0].avgCpu;

db.products1.find({
    color: "white",
    "spec.cpu": { $gt: avgCpuSpeed }
});

2.Write a query to find a product whose cpu is not greater than or equal to 2 without using "$gte","$lte","$lt"($not)

db.products1.find({
    $nor: [
        { "spec.cpu": { $eq: 2 } },
        { "spec.cpu": { $gt: 2 } }
    ]
});

3.Find products that do not have "white" as a color and are priced below 800

db.products1.find({
    $nor: [
        { color: "white" },
        { price: { $gte: 800 } }
    ]
});

4.print the names of products whose screen is either greater than 7 or color is white

db.products1.find({
    $or: [
        { "spec.screen": { $gt: 7 } },
        { color: "white" }
    ]
}, { name: 1, _id: 0 });

5.select products with cpu power not less than 2.66 nor more than 3.66

db.products1.find({
    $and: [
        { "spec.cpu": { $not: { $lt: 2.66 } } },
        { "spec.cpu": { $not: { $gt: 3.66 } } }
    ]
});

6.select products with either white colour and storage not less than 128

db.products1.find({
    $or: [
        { color: "white" },
        { storage: { $not: { $lt: 128 } } }
    ]
});

7.Find products that have either "white" or "black" as a color option and are priced below 800.

db.products1.find({
    $and: [
        { $or: [{ color: "white" }, { color: "black" }] },
        { price: { $lt: 800 } }
    ]
});

8.Find products that do not have "gold" as a color and are priced below 700 or have a storage option of 512GB.

db.products1.find({
    $nor: [
        { color: "gold" },
        { $and: [
            { price: { $gte: 700 } },
            { storage: { $ne: 512 } }
        ] }
    ]
});

9.Write a query to find a product whose cpu is greater than or equal to 2 without using "$gte" ($or)

db.products1.find({
    $or: [
        { "spec.cpu": { $gt: 2 } },
        { "spec.cpu": { $not: { $lt: 2 } } }
    ]
});

10.)Write a query to find a product whose colour is not black or white without using "$nin" ($not)

db.products1.find({
    $nor: [
        { color: "black" },
        { color: "white" }
    ]
});

11.find the product cpu is not  less than 3 ,not isodate is ("2011-09-01")

db.products1.find({
    $nor: [
        { "spec.cpu": { $lt: 3 } },
        { releaseDate: ISODate("2011-09-01") }
    ]
});


12.find name,price,storage if price is 699 or storage is 1024

db.products1.find({
    $or: [
        { price: 699 },
        { storage: 1024 }
    ]
}, { name: 1, price: 1, storage: 1, _id: 0 });




SATURDAY TASK

TASK 1

// SAPTAK SINGHA 22BCE0985
import com.mongodb.MongoClientSettings;
import com.mongodb.client.*;
import com.mongodb.client.model.Filters;
import org.bson.Document;

import java.util.ArrayList;
import java.util.List;

public class MongoDBExample {
    public static void main(String[] args) {
        // Connect to MongoDB server running on localhost:27017
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

        // Access the 'sarurday' database
        MongoDatabase database = mongoClient.getDatabase("sarurday");

        // Access the 'saturday' collection
        MongoCollection<Document> collection = database.getCollection("saturday");

        // Create some documents (records)
        Document doc1 = new Document("firstName", "John")
                .append("lastName", "Doe")
                .append("mark", 85)
                .append("age", 25);

        Document doc2 = new Document("firstName", "Jane")
                .append("lastName", "Smith")
                .append("mark", 92)
                .append("age", 28);

        Document doc3 = new Document("firstName", "Mike")
                .append("lastName", "Johnson")
                .append("mark", 78)
                .append("age", 23);

        Document doc4 = new Document("firstName", "Emily")
                .append("lastName", "Brown")
                .append("mark", 95)
                .append("age", 26);

        // Insert documents into the collection
        collection.insertMany(List.of(doc1, doc2, doc3, doc4));

        // Find the document(s) with the highest marks using cursor method
        MongoCursor<Document> cursor = collection.find()
                .sort(new Document("mark", -1))
                .iterator();

        List<Document> highestMarkDocuments = new ArrayList<>();
        int highestMark = -1; // Initialize with a lower boundary for comparison

        while (cursor.hasNext()) {
            Document doc = cursor.next();
            int mark = doc.getInteger("mark");

            if (mark == highestMark || highestMark == -1) {
                highestMarkDocuments.add(doc);
                highestMark = mark;
            } else {
                break; // Break the loop if we encounter a lower mark
            }
        }

        cursor.close();

        // Print the details of students with the highest marks
        if (!highestMarkDocuments.isEmpty()) {
            System.out.println("Student(s) with highest marks:");
            for (Document doc : highestMarkDocuments) {
                String firstName = doc.getString("firstName");
                String lastName = doc.getString("lastName");
                int mark = doc.getInteger("mark");

                System.out.println("First Name: " + firstName);
                System.out.println("Last Name: " + lastName);
                System.out.println("Marks: " + mark);
                System.out.println("-------------------------");
            }
        } else {
            System.out.println("No documents found in the collection.");
        }

        // Close the MongoDB connection
        mongoClient.close();
    }
}


Task 2

// SAPTAK SINGHA 22BCE0985

import java.util.ArrayList;
import java.util.List;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Sorts;
import com.mongodb.client.model.Filters;

public class Task2 {
    public static void main(String[] args) {

        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

        MongoDatabase database = mongoClient.getDatabase("Student");
        MongoCollection<Document> collection = database.getCollection("Student");

        Document doc1 = new Document("name", "saptak")
                            .append("salary", 14000)
                            .append("age", 20);

        Document doc2 = new Document("name", "Tapan")
                            .append("salary", 20000)
                            .append("age", 66);

        Document doc3 = new Document("name", "sampa")
                            .append("salary", 25000)
                            .append("age", 52);

        Document doc4 = new Document("name", "Rupam")
                            .append("salary", 13000)
                            .append("age", 25);

        Document doc5 = new Document("name", "Alok")
                            .append("salary", 21000)
                            .append("age", 22);

        Document doc6 = new Document("name", "Dev")
                            .append("salary", 65000)
                            .append("age", 37);

        collection.insertMany(List.of(doc1, doc2, doc3, doc4, doc5, doc6));

        Document lowest = collection.find(Filters.and(Filters.gte("age", 30), Filters.lte("age", 40)))
                                             .sort(Sorts.ascending("salary"))
                                             .first();


        String name = lowest.getString("name");
        int salary = lowest.getInteger("salary");
        int age = lowest.getInteger("age");

        System.out.println("Person with the lowest salary between ages 30 and 40:");
        System.out.println(name + " with salary = " + salary + " and age = " + age);

        mongoClient.close();
    }
}
